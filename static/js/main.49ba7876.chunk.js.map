{"version":3,"sources":["components/NumberModal.js","App.js","serviceWorker.js","index.js"],"names":["NumberModal","_ref","title","_ref$onValueSelected","onValueSelected","initialValue","props","Object","objectWithoutProperties","_useState","useState","_useState2","slicedToArray","isModalOpen","setIsModalOpen","closeModal","_useState3","Number","_useState4","value","setValue","canSubmit","undefined","inputRef","useRef","react_default","a","createElement","Fragment","Modal","trigger","Button","assign","onClick","open","onClose","basic","size","onMount","current","focus","Header","content","textAlign","Content","Input","type","name","onChange","e","target","fluid","ref","Actions","color","primary","disabled","AddButtonModal","positive","ResetButtonModal","secondary","ExpenseButtonModal","negative","App","_useLocalStorage","useLocalStorage","_useLocalStorage2","rawBalance","setBalance","balance","useMemo","increaseBalance","amount","className","ButtonGroup","App_AddButtonModal","App_ResetButtonModal","classnames","App_ExpenseButtonModal","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.49ba7876.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { Button, Header, Modal, Input } from \"semantic-ui-react\";\n// import Modal from \"react-modal\";\n// Modal.setAppElement(\"#root\");\n\nexport default function NumberModal({\n  title,\n  onValueSelected = () => {},\n  initialValue,\n  ...props\n}) {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const openModal = () => setIsModalOpen(true);\n  const closeModal = () => setIsModalOpen(false);\n\n  const [value, setValue] = useState(Number(initialValue));\n  const handleInput = e => setValue(e.target.value);\n  const addValue = () => {\n    onValueSelected(Number(value));\n    setValue(Number(initialValue));\n    closeModal();\n  };\n  const canSubmit = value !== undefined;\n\n  const inputRef = useRef();\n  const focusInput = () => inputRef.current && inputRef.current.focus();\n\n  return (\n    <>\n      <Modal\n        trigger={\n          // todo: make this button squared\n          <Button onClick={openModal} {...props}>\n            {title}\n          </Button>\n        }\n        open={isModalOpen}\n        onClose={closeModal}\n        basic\n        size=\"small\"\n        onMount={focusInput}\n      >\n        <Header content={title} textAlign=\"center\" />\n        <Modal.Content>\n          <Input\n            type=\"number\"\n            name=\"value\"\n            value={value}\n            onChange={handleInput}\n            fluid\n            ref={inputRef}\n          />\n        </Modal.Content>\n        <Modal.Actions>\n          {/* todo: center these actions */}\n          <Button onClick={closeModal} color=\"orange\">\n            Cancel\n          </Button>\n          <Button onClick={addValue} primary disabled={!canSubmit}>\n            Ok\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    </>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport NumberModal from \"./components/NumberModal\";\nimport useLocalStorage from \"react-use-localstorage\";\nimport { ButtonGroup } from \"semantic-ui-react\";\nimport classnames from \"classnames\";\n\nimport \"./App.scss\";\n\nconst AddButtonModal = props => <NumberModal {...props} title=\"Add\" positive />;\n\nconst ResetButtonModal = props => (\n  <NumberModal {...props} title=\"Reset\" secondary initialValue={0} />\n);\n\nconst ExpenseButtonModal = props => (\n  <NumberModal {...props} title=\"Expense\" negative fluid />\n);\n\nfunction App() {\n  const [rawBalance, setBalance] = useLocalStorage(\"balance\", 0);\n  const balance = useMemo(() => Number(rawBalance), [rawBalance]);\n\n  const increaseBalance = amount => setBalance(amount + Number(balance));\n  const decreaseBalance = amount => increaseBalance(-amount);\n\n  return (\n    <div className=\"App flex-container\">\n      <ButtonGroup className=\"flex-item\">\n        <AddButtonModal\n          onValueSelected={increaseBalance}\n          className=\"max-height\"\n        />\n        <ResetButtonModal onValueSelected={setBalance} className=\"max-height\" />\n      </ButtonGroup>\n\n      <div\n        fluid\n        className={classnames(\"flex-item vertical-center balance\", {\n          positive: balance >= 0,\n          negative: balance < 0\n        })}\n      >\n        <p className=\"label\">Balance:</p>\n        {/* This should be the highlight */}\n        <p className=\"value\">{balance}</p>\n      </div>\n\n      <div className=\"flex-item\">\n        <ExpenseButtonModal\n          onValueSelected={decreaseBalance}\n          fluid\n          className=\"max-height\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}